<feed xmlns="http://www.w3.org/2005/Atom"> <id>http://zetachoi.github.io/</id><title>ZETAs' Blog</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2025-07-09T13:40:40+08:00</updated> <author> <name>Zeta Choi</name> <uri>http://zetachoi.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="http://zetachoi.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="http://zetachoi.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 Zeta Choi </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>软件设计指南</title><link href="http://zetachoi.github.io/posts/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/" rel="alternate" type="text/html" title="软件设计指南" /><published>2025-07-09T00:00:00+08:00</published> <updated>2025-07-09T13:40:03+08:00</updated> <id>http://zetachoi.github.io/posts/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/</id> <content src="http://zetachoi.github.io/posts/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/" /> <author> <name>Zeta Choi</name> </author> <summary> 1 知识体系概述 graph LR A[系统设计] B[结构化分析和设计] C[面向对象分析和设计] D[OMT] E[OOSE] F[Booch] G[UML] A --&amp;gt; B A --&amp;gt; C C --&amp;gt; D &amp;amp; E &amp;amp; F &amp;amp; G 系统设计的主要内容包括新系统总体结构设计、代码设计、输出设计、输入设计、处理过程设计、数据存储设计、用户界面设计和安全控制设计等。目前，已存在的多种系统设计方法，常用的设计方法有以下两种。 （1）面向数据流的结构化设计方法（SD）。 （2）面向对象的设计方法（OOD）。 结构化分析与设计方法是一种面向数据流的需求分析和设计方法，它适用于分析和设计大型数据处理系统，是一种简单、实用的方法，曾获得广泛的应用。结构化分析方法的特点是利用数据流图来帮助人们理解问题，对问题进行分析。 面向对象分析的目标是开发一... </summary> </entry> <entry><title>分布式事务解决方案</title><link href="http://zetachoi.github.io/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/" rel="alternate" type="text/html" title="分布式事务解决方案" /><published>2024-04-29T13:34:04+08:00</published> <updated>2024-04-29T14:42:59+08:00</updated> <id>http://zetachoi.github.io/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id> <content src="http://zetachoi.github.io/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/" /> <author> <name>Zeta Choi</name> </author> <category term="企业架构设计" /> <summary> [注意] 所有的分布式事务方案，均无法100%保证成功（包括提交和回滚），应综合考虑人工介入处理的时效性和难度，对于现金交易等高敏感性业务不应采用分布式事务方案。条件允许的情况下，应该尽可能地使用单机事务，永远记住：Simple is the best！ 现有解决方案对比 目前主流分布式事务方案都基于2PC、3PC、TCC、SAGA几种模型衍生，形态上有以下几种类型： 1. 数据库原生 以XA协议为代表的数据库原生方案，是实现了ACID特性的刚性事务。 优点： 业务的侵入性低 缺点： 全局加锁，并发性能差 2. 消息驱动方案 最大努力送达，适合用于“对数据库的操作最终一定能够成功”的场景。基于死信队列的最终一致性事务，适用于实时性要求较低的场景。 优点： 逻辑简单 性能损耗小 缺点： 适合的业务场景较少 脏读问题 与... </summary> </entry> <entry><title>网络通信的可靠性保证方法</title><link href="http://zetachoi.github.io/posts/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E4%BF%9D%E8%AF%81%E6%96%B9%E6%B3%95/" rel="alternate" type="text/html" title="网络通信的可靠性保证方法" /><published>2024-04-29T13:34:03+08:00</published> <updated>2024-04-29T14:42:59+08:00</updated> <id>http://zetachoi.github.io/posts/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E4%BF%9D%E8%AF%81%E6%96%B9%E6%B3%95/</id> <content src="http://zetachoi.github.io/posts/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E4%BF%9D%E8%AF%81%E6%96%B9%E6%B3%95/" /> <author> <name>Zeta Choi</name> </author> <category term="企业架构设计" /> <summary> 重试机制 使用消息队列可以实现接口请求的异步重试机制。 基本思路是: 接口请求发送失败后,将请求信息封装为消息,发送到请求重试的队列中。 消息消费者从队列中获取失败的请求,根据策略进行重试。 重复重试直到成功、重试次数用尽或其他终止条件。 成功后将消息移除队列,失败则保留消息供再次重试。 主要步骤: 创建请求重试队列,如“request.retry.queue” 接口请求失败后,生成重试消息,发送到队列 消费者启动线程从队列中取消息重试 根据重试策略进行定时重试或最大重试数 成功则确认消息,失败则重新入队 使用消息队列进行重试有利于: 异步重试,不阻塞主线程 可靠地完成重试任务 灵活控制重试策略 数据加密 B2C公网环境使用HTTPS已经能很好地保证数据安全，业务功能依据具体需求进行敏感数据加密或脱敏即可。B2B... </summary> </entry> <entry><title>KTech New Platfrom 架构原则</title><link href="http://zetachoi.github.io/posts/KTECH-New-Platfrom-%E6%9E%B6%E6%9E%84%E5%8E%9F%E5%88%99/" rel="alternate" type="text/html" title="KTech New Platfrom 架构原则" /><published>2024-04-29T13:34:02+08:00</published> <updated>2024-04-29T13:34:02+08:00</updated> <id>http://zetachoi.github.io/posts/KTECH-New-Platfrom-%E6%9E%B6%E6%9E%84%E5%8E%9F%E5%88%99/</id> <content src="http://zetachoi.github.io/posts/KTECH-New-Platfrom-%E6%9E%B6%E6%9E%84%E5%8E%9F%E5%88%99/" /> <author> <name>Zeta Choi</name> </author> <category term="企业架构设计" /> <summary> 基于![技术架构选型]中对各个架构模式的理解，并结合银行产品特性以及对云原生架构的适应性，本文说明KTECH New Platfrom的架构原则。 架构模式 KTECH New Platfrom选择以Mini-Service架构为基础的微服务模式，遵循以下原则： 项目工程模块以微服务方式设计，并组合为单个web项目部署，从而确保在拆分服务时更便捷。 允许多个业务模块共享同一个数据库，同时仅在数据库层完全解耦时允许微服务拆分。 通用服务与业务服务间通过REST API或异步方式通信。 除微服务网关，不同微服务必须采用基于事件的异步方式通信。 微服务间应各自保证可用性。 架构原则说明： 原则1 考虑到目前银行项目的性能要求和硬件资源成本，采用New Platfrom的项目应从单体模式开始发展架构，同时应保持拆分微服务的能力，参考以下New Platfrom项... </summary> </entry> <entry><title>云原生架构介绍及技术选型</title><link href="http://zetachoi.github.io/posts/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84%E5%8F%8A%E4%BA%91%E5%8C%96%E6%94%B9%E9%80%A0%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/" rel="alternate" type="text/html" title="云原生架构介绍及技术选型" /><published>2024-04-29T13:34:01+08:00</published> <updated>2024-04-29T14:42:59+08:00</updated> <id>http://zetachoi.github.io/posts/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84%E5%8F%8A%E4%BA%91%E5%8C%96%E6%94%B9%E9%80%A0%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/</id> <content src="http://zetachoi.github.io/posts/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84%E5%8F%8A%E4%BA%91%E5%8C%96%E6%94%B9%E9%80%A0%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B/" /> <author> <name>Zeta Choi</name> </author> <category term="企业架构设计" /> <summary> 什么是云原生 理解云原生前首先要明白什么是“云”，“云”即“云技术”，指用户可以在任何时间、任何地点通过网络访问存储在远程服务器中的数据或使用计算服务，它有三种主要形式：基础设施服务IAAS，指虚拟机、存储、网络、操作系统等基础设施层面服务；平台服务PAAS，指将IAAS包装成平台，提供一系列开发、管理、监控功能的服务；应用服务SAAS，指在PAAS基础上构建好的应用程序，通常以订阅方式提供，用户不必关注程序的维护、升级和扩展。从技术架构角度而言，软件开发依赖IAAS、PAAS设施，构建SAAS服务，此时“云”默指各种公有云、私有云设施。 因此，“云原生（应用）”从字面拆解，可理解为在云（平台）中依托平台“原生”能力体系构建的一系列应用。CNCF官方对云原生的定义是：Cloud native technologies empower organizations to build a... </summary> </entry> </feed>
